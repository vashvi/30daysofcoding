Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 










class Solution {
    static int merge(int [] nums,int low,int mid,int high){
        ArrayList<Integer> temp = new ArrayList<>();
        int left= low;
        int right = mid+1;
        int cnt=0;
        for ( left = low; left <= mid; left++) {
            while (right <= high && nums[left] > 2 * (long) nums[right]) {
                right++;
            }
            cnt += (right - (mid + 1));
        }
        left=low;
        right=mid+1;
        while(left<=mid&&right<=high){
            if(nums[left]<=nums[right]){
                temp.add(nums[left]);
                left++;
            }else{
                temp.add(nums[right]);
                right++;
            }
        }
        while(left<=mid){
            temp.add(nums[left]);
            left++;
        }
        while(right<=high){
            temp.add(nums[right]);
            right++;
        }
        for(int i=low;i<=high;i++){
            nums[i]=temp.get(i-low);
        }
        return cnt;
    }
    static int ms(int []nums,int low,int high){
        int cnt=0;
        if(low>=high)return cnt;
        int mid= (low+high)/2;
        cnt+=ms(nums,low,mid);
        cnt+=ms(nums,mid+1,high);
        cnt+=merge(nums,low,mid,high);
        return cnt;
    }
    public int reversePairs(int[] nums) {
        return ms(nums,0,nums.length-1);
    }
}
