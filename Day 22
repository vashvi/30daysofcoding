You are given an integer n and a 2D array requirements, where requirements[i] = [endi, cnti] represents the end index and the inversion count of each requirement.

A pair of indices (i, j) from an integer array nums is called an inversion if:

i < j and nums[i] > nums[j]
Return the number of 
permutations
 perm of [0, 1, 2, ..., n - 1] such that for all requirements[i], perm[0..endi] has exactly cnti inversions.

Since the answer may be very large, return it modulo 109 + 7.



class Solution {
public:
    int numberOfPermutations(int n, vector<vector<int>>& requirements) {
        vector<vector<int>> dp(n + 1, vector<int>(401, 0));
        vector<int> req(n + 1, -1);

        for (auto& r : requirements) {
            req[r[0] + 1] = r[1];
        }

        const int mod = 1e9 + 7;

        if (req[1] <= 0) {
            dp[1][0] = 1;
        }

        for (int i = 2; i <= n; i++) {
            for (int c = 0; c < i; c++) {
                for (int j = 0; j + c <= 400; j++) {
                    if (req[i] != -1 && j + c != req[i]) {
                        continue;
                    }
                    dp[i][j + c] += dp[i - 1][j];
                    dp[i][j + c] %= mod;
                }
            }
        }

        return dp[n][req[n]];
    }
};
